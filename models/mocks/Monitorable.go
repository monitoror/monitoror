// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	models "github.com/monitoror/monitoror/models"
	mock "github.com/stretchr/testify/mock"
)

// Monitorable is an autogenerated mock type for the Monitorable type
type Monitorable struct {
	mock.Mock
}

// Enable provides a mock function with given fields: variantName
func (_m *Monitorable) Enable(variantName models.VariantName) {
	_m.Called(variantName)
}

// GetDisplayName provides a mock function with given fields:
func (_m *Monitorable) GetDisplayName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetVariantsNames provides a mock function with given fields:
func (_m *Monitorable) GetVariantsNames() []models.VariantName {
	ret := _m.Called()

	var r0 []models.VariantName
	if rf, ok := ret.Get(0).(func() []models.VariantName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.VariantName)
		}
	}

	return r0
}

// Validate provides a mock function with given fields: variantName
func (_m *Monitorable) Validate(variantName models.VariantName) (bool, []error) {
	ret := _m.Called(variantName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.VariantName) bool); ok {
		r0 = rf(variantName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []error
	if rf, ok := ret.Get(1).(func(models.VariantName) []error); ok {
		r1 = rf(variantName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}
