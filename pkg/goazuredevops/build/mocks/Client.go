// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	build "github.com/jsdidierlaurent/azure-devops-go-api/azuredevops/build"

	io "io"

	mock "github.com/stretchr/testify/mock"

	webapi "github.com/jsdidierlaurent/azure-devops-go-api/azuredevops/webapi"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddBuildTag provides a mock function with given fields: _a0, _a1
func (_m *Client) AddBuildTag(_a0 context.Context, _a1 build.AddBuildTagArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.AddBuildTagArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AddBuildTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddBuildTags provides a mock function with given fields: _a0, _a1
func (_m *Client) AddBuildTags(_a0 context.Context, _a1 build.AddBuildTagsArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.AddBuildTagsArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AddBuildTagsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDefinitionTag provides a mock function with given fields: _a0, _a1
func (_m *Client) AddDefinitionTag(_a0 context.Context, _a1 build.AddDefinitionTagArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.AddDefinitionTagArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AddDefinitionTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddDefinitionTags provides a mock function with given fields: _a0, _a1
func (_m *Client) AddDefinitionTags(_a0 context.Context, _a1 build.AddDefinitionTagsArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.AddDefinitionTagsArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AddDefinitionTagsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeDefinitionResources provides a mock function with given fields: _a0, _a1
func (_m *Client) AuthorizeDefinitionResources(_a0 context.Context, _a1 build.AuthorizeDefinitionResourcesArgs) (*[]build.DefinitionResourceReference, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.DefinitionResourceReference
	if rf, ok := ret.Get(0).(func(context.Context, build.AuthorizeDefinitionResourcesArgs) *[]build.DefinitionResourceReference); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.DefinitionResourceReference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AuthorizeDefinitionResourcesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeProjectResources provides a mock function with given fields: _a0, _a1
func (_m *Client) AuthorizeProjectResources(_a0 context.Context, _a1 build.AuthorizeProjectResourcesArgs) (*[]build.DefinitionResourceReference, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.DefinitionResourceReference
	if rf, ok := ret.Get(0).(func(context.Context, build.AuthorizeProjectResourcesArgs) *[]build.DefinitionResourceReference); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.DefinitionResourceReference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.AuthorizeProjectResourcesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArtifact provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateArtifact(_a0 context.Context, _a1 build.CreateArtifactArgs) (*build.BuildArtifact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildArtifact
	if rf, ok := ret.Get(0).(func(context.Context, build.CreateArtifactArgs) *build.BuildArtifact); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildArtifact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.CreateArtifactArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDefinition provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateDefinition(_a0 context.Context, _a1 build.CreateDefinitionArgs) (*build.BuildDefinition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinition
	if rf, ok := ret.Get(0).(func(context.Context, build.CreateDefinitionArgs) *build.BuildDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.CreateDefinitionArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFolder provides a mock function with given fields: _a0, _a1
func (_m *Client) CreateFolder(_a0 context.Context, _a1 build.CreateFolderArgs) (*build.Folder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Folder
	if rf, ok := ret.Get(0).(func(context.Context, build.CreateFolderArgs) *build.Folder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.CreateFolderArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBuild provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteBuild(_a0 context.Context, _a1 build.DeleteBuildArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteBuildArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBuildTag provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteBuildTag(_a0 context.Context, _a1 build.DeleteBuildTagArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteBuildTagArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.DeleteBuildTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDefinition provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteDefinition(_a0 context.Context, _a1 build.DeleteDefinitionArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteDefinitionArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDefinitionTag provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteDefinitionTag(_a0 context.Context, _a1 build.DeleteDefinitionTagArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteDefinitionTagArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.DeleteDefinitionTagArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFolder provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteFolder(_a0 context.Context, _a1 build.DeleteFolderArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteFolderArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTemplate provides a mock function with given fields: _a0, _a1
func (_m *Client) DeleteTemplate(_a0 context.Context, _a1 build.DeleteTemplateArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, build.DeleteTemplateArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetArtifact provides a mock function with given fields: _a0, _a1
func (_m *Client) GetArtifact(_a0 context.Context, _a1 build.GetArtifactArgs) (*build.BuildArtifact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildArtifact
	if rf, ok := ret.Get(0).(func(context.Context, build.GetArtifactArgs) *build.BuildArtifact); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildArtifact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetArtifactArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifactContentZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetArtifactContentZip(_a0 context.Context, _a1 build.GetArtifactContentZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetArtifactContentZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetArtifactContentZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifacts provides a mock function with given fields: _a0, _a1
func (_m *Client) GetArtifacts(_a0 context.Context, _a1 build.GetArtifactsArgs) (*[]build.BuildArtifact, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildArtifact
	if rf, ok := ret.Get(0).(func(context.Context, build.GetArtifactsArgs) *[]build.BuildArtifact); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildArtifact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetArtifactsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachment provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAttachment(_a0 context.Context, _a1 build.GetAttachmentArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetAttachmentArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetAttachmentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachments provides a mock function with given fields: _a0, _a1
func (_m *Client) GetAttachments(_a0 context.Context, _a1 build.GetAttachmentsArgs) (*[]build.Attachment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.Attachment
	if rf, ok := ret.Get(0).(func(context.Context, build.GetAttachmentsArgs) *[]build.Attachment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.Attachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetAttachmentsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuild provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuild(_a0 context.Context, _a1 build.GetBuildArgs) (*build.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Build
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildArgs) *build.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildBadge provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildBadge(_a0 context.Context, _a1 build.GetBuildBadgeArgs) (*build.BuildBadge, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildBadge
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildBadgeArgs) *build.BuildBadge); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildBadge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildBadgeArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildBadgeData provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildBadgeData(_a0 context.Context, _a1 build.GetBuildBadgeDataArgs) (*string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildBadgeDataArgs) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildBadgeDataArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildChanges provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildChanges(_a0 context.Context, _a1 build.GetBuildChangesArgs) (*build.GetBuildChangesResponseValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.GetBuildChangesResponseValue
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildChangesArgs) *build.GetBuildChangesResponseValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.GetBuildChangesResponseValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildChangesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildController provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildController(_a0 context.Context, _a1 build.GetBuildControllerArgs) (*build.BuildController, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildController
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildControllerArgs) *build.BuildController); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildController)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildControllerArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildControllers provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildControllers(_a0 context.Context, _a1 build.GetBuildControllersArgs) (*[]build.BuildController, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildController
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildControllersArgs) *[]build.BuildController); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildController)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildControllersArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildLog provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildLog(_a0 context.Context, _a1 build.GetBuildLogArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildLogArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildLogArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildLogLines provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildLogLines(_a0 context.Context, _a1 build.GetBuildLogLinesArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildLogLinesArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildLogLinesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildLogZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildLogZip(_a0 context.Context, _a1 build.GetBuildLogZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildLogZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildLogZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildLogs provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildLogs(_a0 context.Context, _a1 build.GetBuildLogsArgs) (*[]build.BuildLog, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildLog
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildLogsArgs) *[]build.BuildLog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildLog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildLogsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildLogsZip provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildLogsZip(_a0 context.Context, _a1 build.GetBuildLogsZipArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildLogsZipArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildLogsZipArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildOptionDefinitions provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildOptionDefinitions(_a0 context.Context, _a1 build.GetBuildOptionDefinitionsArgs) (*[]build.BuildOptionDefinition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildOptionDefinition
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildOptionDefinitionsArgs) *[]build.BuildOptionDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildOptionDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildOptionDefinitionsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildProperties(_a0 context.Context, _a1 build.GetBuildPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildReport provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildReport(_a0 context.Context, _a1 build.GetBuildReportArgs) (*build.BuildReportMetadata, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildReportMetadata
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildReportArgs) *build.BuildReportMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildReportMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildReportArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildReportHtmlContent provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildReportHtmlContent(_a0 context.Context, _a1 build.GetBuildReportHtmlContentArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildReportHtmlContentArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildReportHtmlContentArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildSettings provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildSettings(_a0 context.Context, _a1 build.GetBuildSettingsArgs) (*build.BuildSettings, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildSettings
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildSettingsArgs) *build.BuildSettings); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildSettingsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildTags provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildTags(_a0 context.Context, _a1 build.GetBuildTagsArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildTagsArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildTagsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildTimeline provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildTimeline(_a0 context.Context, _a1 build.GetBuildTimelineArgs) (*build.Timeline, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Timeline
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildTimelineArgs) *build.Timeline); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Timeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildTimelineArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildWorkItemsRefs provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildWorkItemsRefs(_a0 context.Context, _a1 build.GetBuildWorkItemsRefsArgs) (*[]webapi.ResourceRef, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]webapi.ResourceRef
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildWorkItemsRefsArgs) *[]webapi.ResourceRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]webapi.ResourceRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildWorkItemsRefsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildWorkItemsRefsFromCommits provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuildWorkItemsRefsFromCommits(_a0 context.Context, _a1 build.GetBuildWorkItemsRefsFromCommitsArgs) (*[]webapi.ResourceRef, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]webapi.ResourceRef
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildWorkItemsRefsFromCommitsArgs) *[]webapi.ResourceRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]webapi.ResourceRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildWorkItemsRefsFromCommitsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuilds provides a mock function with given fields: _a0, _a1
func (_m *Client) GetBuilds(_a0 context.Context, _a1 build.GetBuildsArgs) (*build.GetBuildsResponseValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.GetBuildsResponseValue
	if rf, ok := ret.Get(0).(func(context.Context, build.GetBuildsArgs) *build.GetBuildsResponseValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.GetBuildsResponseValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetBuildsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangesBetweenBuilds provides a mock function with given fields: _a0, _a1
func (_m *Client) GetChangesBetweenBuilds(_a0 context.Context, _a1 build.GetChangesBetweenBuildsArgs) (*[]build.Change, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.Change
	if rf, ok := ret.Get(0).(func(context.Context, build.GetChangesBetweenBuildsArgs) *[]build.Change); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.Change)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetChangesBetweenBuildsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinition provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinition(_a0 context.Context, _a1 build.GetDefinitionArgs) (*build.BuildDefinition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinition
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionArgs) *build.BuildDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitionMetrics provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitionMetrics(_a0 context.Context, _a1 build.GetDefinitionMetricsArgs) (*[]build.BuildMetric, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildMetric
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionMetricsArgs) *[]build.BuildMetric); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildMetric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionMetricsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitionProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitionProperties(_a0 context.Context, _a1 build.GetDefinitionPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitionResources provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitionResources(_a0 context.Context, _a1 build.GetDefinitionResourcesArgs) (*[]build.DefinitionResourceReference, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.DefinitionResourceReference
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionResourcesArgs) *[]build.DefinitionResourceReference); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.DefinitionResourceReference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionResourcesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitionRevisions provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitionRevisions(_a0 context.Context, _a1 build.GetDefinitionRevisionsArgs) (*[]build.BuildDefinitionRevision, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildDefinitionRevision
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionRevisionsArgs) *[]build.BuildDefinitionRevision); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildDefinitionRevision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionRevisionsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitionTags provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitionTags(_a0 context.Context, _a1 build.GetDefinitionTagsArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionTagsArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionTagsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefinitions provides a mock function with given fields: _a0, _a1
func (_m *Client) GetDefinitions(_a0 context.Context, _a1 build.GetDefinitionsArgs) (*build.GetDefinitionsResponseValue, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.GetDefinitionsResponseValue
	if rf, ok := ret.Get(0).(func(context.Context, build.GetDefinitionsArgs) *build.GetDefinitionsResponseValue); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.GetDefinitionsResponseValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetDefinitionsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFile provides a mock function with given fields: _a0, _a1
func (_m *Client) GetFile(_a0 context.Context, _a1 build.GetFileArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetFileArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetFileArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileContents provides a mock function with given fields: _a0, _a1
func (_m *Client) GetFileContents(_a0 context.Context, _a1 build.GetFileContentsArgs) (io.ReadCloser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, build.GetFileContentsArgs) io.ReadCloser); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetFileContentsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolders provides a mock function with given fields: _a0, _a1
func (_m *Client) GetFolders(_a0 context.Context, _a1 build.GetFoldersArgs) (*[]build.Folder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.Folder
	if rf, ok := ret.Get(0).(func(context.Context, build.GetFoldersArgs) *[]build.Folder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetFoldersArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBuild provides a mock function with given fields: _a0, _a1
func (_m *Client) GetLatestBuild(_a0 context.Context, _a1 build.GetLatestBuildArgs) (*build.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Build
	if rf, ok := ret.Get(0).(func(context.Context, build.GetLatestBuildArgs) *build.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetLatestBuildArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPathContents provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPathContents(_a0 context.Context, _a1 build.GetPathContentsArgs) (*[]build.SourceRepositoryItem, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.SourceRepositoryItem
	if rf, ok := ret.Get(0).(func(context.Context, build.GetPathContentsArgs) *[]build.SourceRepositoryItem); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.SourceRepositoryItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetPathContentsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectMetrics provides a mock function with given fields: _a0, _a1
func (_m *Client) GetProjectMetrics(_a0 context.Context, _a1 build.GetProjectMetricsArgs) (*[]build.BuildMetric, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildMetric
	if rf, ok := ret.Get(0).(func(context.Context, build.GetProjectMetricsArgs) *[]build.BuildMetric); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildMetric)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetProjectMetricsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectResources provides a mock function with given fields: _a0, _a1
func (_m *Client) GetProjectResources(_a0 context.Context, _a1 build.GetProjectResourcesArgs) (*[]build.DefinitionResourceReference, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.DefinitionResourceReference
	if rf, ok := ret.Get(0).(func(context.Context, build.GetProjectResourcesArgs) *[]build.DefinitionResourceReference); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.DefinitionResourceReference)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetProjectResourcesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPullRequest provides a mock function with given fields: _a0, _a1
func (_m *Client) GetPullRequest(_a0 context.Context, _a1 build.GetPullRequestArgs) (*build.PullRequest, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.PullRequest
	if rf, ok := ret.Get(0).(func(context.Context, build.GetPullRequestArgs) *build.PullRequest); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.PullRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetPullRequestArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceUsage provides a mock function with given fields: _a0, _a1
func (_m *Client) GetResourceUsage(_a0 context.Context, _a1 build.GetResourceUsageArgs) (*build.BuildResourceUsage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildResourceUsage
	if rf, ok := ret.Get(0).(func(context.Context, build.GetResourceUsageArgs) *build.BuildResourceUsage); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildResourceUsage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetResourceUsageArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatusBadge provides a mock function with given fields: _a0, _a1
func (_m *Client) GetStatusBadge(_a0 context.Context, _a1 build.GetStatusBadgeArgs) (*string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetStatusBadgeArgs) *string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetStatusBadgeArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: _a0, _a1
func (_m *Client) GetTags(_a0 context.Context, _a1 build.GetTagsArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.GetTagsArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetTagsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplate provides a mock function with given fields: _a0, _a1
func (_m *Client) GetTemplate(_a0 context.Context, _a1 build.GetTemplateArgs) (*build.BuildDefinitionTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinitionTemplate
	if rf, ok := ret.Get(0).(func(context.Context, build.GetTemplateArgs) *build.BuildDefinitionTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinitionTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetTemplateArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplates provides a mock function with given fields: _a0, _a1
func (_m *Client) GetTemplates(_a0 context.Context, _a1 build.GetTemplatesArgs) (*[]build.BuildDefinitionTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.BuildDefinitionTemplate
	if rf, ok := ret.Get(0).(func(context.Context, build.GetTemplatesArgs) *[]build.BuildDefinitionTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.BuildDefinitionTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetTemplatesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkItemsBetweenBuilds provides a mock function with given fields: _a0, _a1
func (_m *Client) GetWorkItemsBetweenBuilds(_a0 context.Context, _a1 build.GetWorkItemsBetweenBuildsArgs) (*[]webapi.ResourceRef, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]webapi.ResourceRef
	if rf, ok := ret.Get(0).(func(context.Context, build.GetWorkItemsBetweenBuildsArgs) *[]webapi.ResourceRef); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]webapi.ResourceRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.GetWorkItemsBetweenBuildsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranches provides a mock function with given fields: _a0, _a1
func (_m *Client) ListBranches(_a0 context.Context, _a1 build.ListBranchesArgs) (*[]string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]string
	if rf, ok := ret.Get(0).(func(context.Context, build.ListBranchesArgs) *[]string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.ListBranchesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositories provides a mock function with given fields: _a0, _a1
func (_m *Client) ListRepositories(_a0 context.Context, _a1 build.ListRepositoriesArgs) (*build.SourceRepositories, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.SourceRepositories
	if rf, ok := ret.Get(0).(func(context.Context, build.ListRepositoriesArgs) *build.SourceRepositories); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.SourceRepositories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.ListRepositoriesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceProviders provides a mock function with given fields: _a0, _a1
func (_m *Client) ListSourceProviders(_a0 context.Context, _a1 build.ListSourceProvidersArgs) (*[]build.SourceProviderAttributes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.SourceProviderAttributes
	if rf, ok := ret.Get(0).(func(context.Context, build.ListSourceProvidersArgs) *[]build.SourceProviderAttributes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.SourceProviderAttributes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.ListSourceProvidersArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebhooks provides a mock function with given fields: _a0, _a1
func (_m *Client) ListWebhooks(_a0 context.Context, _a1 build.ListWebhooksArgs) (*[]build.RepositoryWebhook, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.RepositoryWebhook
	if rf, ok := ret.Get(0).(func(context.Context, build.ListWebhooksArgs) *[]build.RepositoryWebhook); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.RepositoryWebhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.ListWebhooksArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueBuild provides a mock function with given fields: _a0, _a1
func (_m *Client) QueueBuild(_a0 context.Context, _a1 build.QueueBuildArgs) (*build.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Build
	if rf, ok := ret.Get(0).(func(context.Context, build.QueueBuildArgs) *build.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.QueueBuildArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDefinition provides a mock function with given fields: _a0, _a1
func (_m *Client) RestoreDefinition(_a0 context.Context, _a1 build.RestoreDefinitionArgs) (*build.BuildDefinition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinition
	if rf, ok := ret.Get(0).(func(context.Context, build.RestoreDefinitionArgs) *build.BuildDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.RestoreDefinitionArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreWebhooks provides a mock function with given fields: _a0, _a1
func (_m *Client) RestoreWebhooks(_a0 context.Context, _a1 build.RestoreWebhooksArgs) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, build.RestoreWebhooksArgs) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTemplate provides a mock function with given fields: _a0, _a1
func (_m *Client) SaveTemplate(_a0 context.Context, _a1 build.SaveTemplateArgs) (*build.BuildDefinitionTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinitionTemplate
	if rf, ok := ret.Get(0).(func(context.Context, build.SaveTemplateArgs) *build.BuildDefinitionTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinitionTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.SaveTemplateArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuild provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateBuild(_a0 context.Context, _a1 build.UpdateBuildArgs) (*build.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Build
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateBuildArgs) *build.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateBuildArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuildProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateBuildProperties(_a0 context.Context, _a1 build.UpdateBuildPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateBuildPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateBuildPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuildSettings provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateBuildSettings(_a0 context.Context, _a1 build.UpdateBuildSettingsArgs) (*build.BuildSettings, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildSettings
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateBuildSettingsArgs) *build.BuildSettings); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildSettings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateBuildSettingsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBuilds provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateBuilds(_a0 context.Context, _a1 build.UpdateBuildsArgs) (*[]build.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]build.Build
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateBuildsArgs) *[]build.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]build.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateBuildsArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefinition provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateDefinition(_a0 context.Context, _a1 build.UpdateDefinitionArgs) (*build.BuildDefinition, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.BuildDefinition
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateDefinitionArgs) *build.BuildDefinition); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.BuildDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateDefinitionArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefinitionProperties provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateDefinitionProperties(_a0 context.Context, _a1 build.UpdateDefinitionPropertiesArgs) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateDefinitionPropertiesArgs) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateDefinitionPropertiesArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFolder provides a mock function with given fields: _a0, _a1
func (_m *Client) UpdateFolder(_a0 context.Context, _a1 build.UpdateFolderArgs) (*build.Folder, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *build.Folder
	if rf, ok := ret.Get(0).(func(context.Context, build.UpdateFolderArgs) *build.Folder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*build.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, build.UpdateFolderArgs) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
